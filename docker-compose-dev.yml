version: '3.8'

services:
  # Base image is built but not run as a service
  # Other services will use it as their base image

  # Service Discovery (Consul for local development)
  consul:
    image: consul:1.15
    container_name: consul
    env_file:
      - ./.env.development      
    environment:
      - CONSUL_HOST=${CONSUL_HOST}
      - CONSUL_PORT=${CONSUL_PORT}
    ports:
      - "${CONSUL_PORT}:${CONSUL_PORT}"
    command: agent -dev -client=0.0.0.0 -bind=0.0.0.0
    networks:
      - app-network

  dynamodb:
    image: amazon/dynamodb-local
    container_name: dynamodb
    ports:
      - "${DYNAMODB_PORT}:${DYNAMODB_PORT}"
    command: "-jar DynamoDBLocal.jar -sharedDb -dbPath ./data"
    volumes:
      - dynamodb_data:/home/dynamodblocal/data
    networks:
      - app-network

  localstack:
    image: localstack/localstack:latest
    container_name: localstack
    ports:
      - "${LOCALSTACK_PORT}:${LOCALSTACK_PORT}" 
    environment:
      - DEBUG=1
      - DOCKER_HOST=unix:///var/run/docker.sock
      - LAMBDA_EXECUTOR=docker
      - LAMBDA_REMOTE_DOCKER=false
      - LAMBDA_DOCKER_NETWORK=cursor_app-network
      - SERVICES=${LOCALSTACK_SERVICES}
      - DATA_DIR=${LOCALSTACK_REMOTE_DATA_DIR}
      - PERSISTENCE=1
      - EDGE_PORT=${LOCALSTACK_PORT}
      - TMPDIR=/var/lib/localstack/tmp
      - LS_LOG=${LOCALSTACK_LOG_LEVEL}
    volumes:
      - "${LOCALSTACK_VOLUME_DIR}:${LOCALSTACK_REMOTE_DATA_DIR}"
      - "/var/run/docker.sock:/var/run/docker.sock"
    healthcheck:
      test: ["CMD", "curl", "-f", "${AWS_ENDPOINT}/_localstack/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - app-network

  api:
    build:
      context: .
      dockerfile: ./server/api/Dockerfile
      target: development
    container_name: api
    volumes:
      - .:/app
      - /app/client
      - /app/server/ffmpeg
      - /app/server/api/node_modules
      - /app/node_modules
      - ./.env.development:/app/.env:ro
      - /var/run/docker.sock:/var/run/docker.sock      
    env_file:
      - ./.env.development   
    ports:
      - "${API_PORT}:${API_PORT}"
      - "${API_DEBUG_PORT}:${API_DEBUG_PORT}"  
    command: yarn workspace @fretstop/api dev  
    depends_on:
      consul:
        condition: service_started
    networks:
      - app-network

  ffmpeg:
    build:
      context: .
      dockerfile: ./server/ffmpeg/Dockerfile
      target: development
    container_name: ffmpeg
    volumes:
      - .:/app
      - /app/client
      - /app/server/api
      - /app/server/ffmpeg/node_modules
      - /app/node_modules
      - ./.env.development:/app/.env:ro
      - /var/run/docker.sock:/var/run/docker.sock
    env_file:
      - ./.env.development
    ports:
      - "${FFMPEG_PORT}:${FFMPEG_PORT}"
      - "${FFMPEG_DEBUG_PORT}:${FFMPEG_DEBUG_PORT}"
    command: yarn workspace @fretstop/ffmpeg dev
    depends_on:
      consul:
        condition: service_started
    networks:
      - app-network

  client:
    build:
      context: .
      dockerfile: ./client/Dockerfile
      target: development
    env_file:
      - ./.env.development
    ports:
      - "${CLIENT_PORT}:${CLIENT_PORT}"
    volumes:
      - .:/app
      - /app/node_modules
    command: yarn workspace @fretstop/client dev
    depends_on:
      consul:
        condition: service_started
    networks:
      - app-network

networks:
  app-network:
    name: cursor_app-network

